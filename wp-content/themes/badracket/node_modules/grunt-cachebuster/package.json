{
  "name": "grunt-cachebuster",
  "description": "Generates a file containing file hashes",
  "version": "0.1.4",
  "homepage": "https://github.com/felthy/grunt-cachebuster",
  "author": {
    "name": "Pete Feltham",
    "email": "dev@felthy.com",
    "url": "http://felthy.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/felthy/grunt-cachebuster.git"
  },
  "bugs": {
    "url": "https://github.com/felthy/grunt-cachebuster/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/felthy/grunt-cachebuster/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-cachebuster\n\nThis grunt task iterates over its source files, calculating the MD5 hash of each, then creates a file containing the\nlist of filenames and hashes. This file can then be used in your project to generate filenames that contain the MD5\nhash of the file's contents, e.g. main-ae65552d65cd19ab4f1996c77915ed42.js, so that even if a sticky cache is used,\nclients will always load the latest version of files whenever they change.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-cachebuster --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-cachebuster');\n```\n\n## The \"cachebuster\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `cachebuster` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  cachebuster: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n})\n```\n\n### Options\n\n#### options.banner\nType: `String`\nDefault value: `''`\n\nIf specified, this text is inserted at the top of the generated file. Take care that the banner will be valid in the\nchosen file format - e.g. if options.format is `'json'` then banner should be a javascript comment, and in that case\nonly if your json parser supports comments; if options.format is `'php'`, then the banner will be inserted *after* the\n`<?php` line and the banner should be specified as a valid php code or comment(s).\n\nYou may use Grunt templates in the banner, for example:\n\n```js\n    banner: '/*! <%= pkg.name %> - v<%= pkg.version %> - ' +\n            '<%= grunt.template.today(\"yyyy-mm-dd\") %> */'\n```\n\n#### options.basedir\nType: `String`\nDefault value: none\n\nIf specified, source filenames will be converted to be relative to this path when they are written to the destination\nfile. For example, given the following configuration:\n\n```js\ngrunt.initConfig({\n    cachebuster: {\n        build: {\n            options: {\n                banner: '<%= meta.custom_banner %>',\n                format: 'json',\n                basedir: 'src/assets/'\n            },\n            src: [ 'src/assets/filename1', 'src/assets/folder1/filename2' ],\n            dest: 'target/cachebusters.json'\n        }\n    },\n)\n```\n\nthe resulting `target/cachebusters.json` would be:\n\n```js\n{\"filename1\":\"fa6a5a3224d7da66d9e0bdec25f62cf0\",\"folder1/filename2\":\"5ba48b6e5a7c4d4930fda256f411e55b\"}\n```\n\n#### options.complete\nType: `Function`\nDefault value: none\n\nIf specified, this function will be called, passing the finished hashes object as its sole parameter, and its return\nvalue will be processed through the configured formatter for writing to the destination file. This can be used to\naugment the hashes in some way before the file is generated.\n\nThis may be useful if you're using the `'php'` output format, but you need your php array structure to be different\nto the default. For example, this function can be used to nest the array inside a parent array for use as a Laravel\nconfiguration file:\n\n```js\ngrunt.initConfig({\n    laravel-cachebuster-configuration: {\n        options: {\n            basedir: 'public/',\n            format: 'php',\n            banner:\n                '/**\\n' +\n                ' * GENERATED FILE, DO NOT EDIT. This file is simply a collection of generated hashes for static assets in \\n' +\n                ' * the project. It is generated by grunt, see Gruntfile.js for details.\\n' +\n                ' */'\n            complete: function(hashes) {\n                return {\n                    md5: hashes\n                };\n            }\n        },\n        src: ['public/**/*'],\n        dest: 'application/config/cachebuster.php'\n    },\n})\n```\n\nThe resulting `'application/config/cachebuster.php'` file will contain something like:\n\n```php\n<?php\n/**\n * GENERATED FILE, DO NOT EDIT. This file is simply a collection of generated hashes for static assets in\n * the project. It is generated by grunt, see Gruntfile.js for details.\n */\nreturn array(\n\t'md5' => array(\n\t\t'js/main.js' => 'ae65552d65cd19ab4f1996c77915ed42',\n\t\t'js/vendor/modernizr-2.6.2.min.js' => 'b8009fa783ea3de3802efcd29d7473d5',\n\t\t'img/bg/about.jpg' => '7e402c1d64f0b00b4ade850f9017556a',\n\t\t'crossdomain.xml' => '625e6c239ea0b5504ce0641b74ec2a3b',\n\t)\n);\n```\n\n#### options.format\nType: `String`\nDefault value: `'json'`\nSupported values: `'json'`, `'php'`\n\nSpecifies in which format the destination file will be generated.\n\n#### options.formatter\nType: `Function`\nDefault value: none\n\nIf `options.formatter` is specified, then `options.format` will be ignored and the specified function will be called\ninstead to generate the contents of the destination file.\n\nThe function will be passed two arguments, `hashes` and `banner`, and is expected to return a string. The returned\nstring will be written unmodified to the destination file.\n\nFunction arguments:\n\n  * `hashes`: an object containing the MD5 hashes of all specified source files keyed by filename.\n  * `banner`: the banner string to be prepended to the output, or an empty string if no banner was configured.\n\nExample `hashes` parameter:\n\n```js\n    {\n      \"path/to/filename1\" : \"fa6a5a3224d7da66d9e0bdec25f62cf0\",\n      \"path/to/filename2\" : \"5ba48b6e5a7c4d4930fda256f411e55b\"\n    }\n```\n\n\n### Usage Examples\n\n#### Default Options\nIn this example, the default options are used; so the files `src/file1` and `src/file2` will each be read, and their\nMD5 hashes will be written into the file `dest/cachebusters.json` in the default format, which is JSON.\n\n```js\ngrunt.initConfig({\n    cachebuster: {\n        options: {},\n        files: {\n            'dest/cachebusters.json': ['src/file1', 'src/file2'],\n        },\n    },\n})\n```\n\n\n#### Custom Options\nIn this example, the use of a custom formatter allows writing the MD5 hashes of the source files to the destination\nfile in CSV format.\n\n```js\ngrunt.initConfig({\n    cachebuster: {\n        options: {\n            basedir: 'src/assets/',\n            formatter: function(hashes) {\n                var output = '\"Filename\",\"Hash\"\\n';\n                for (var filename in hashes) {\n                    output += '\"' + filename + '\",\"' + hashes[filename] + '\"\\n';\n                }\n                return output;\n            }\n        },\n        src: 'src/assets/**/*',\n        dest: 'dest/cachebusters.csv'\n    }\n})\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n_(Nothing yet)_\n",
  "readmeFilename": "README.md",
  "_id": "grunt-cachebuster@0.1.4",
  "dist": {
    "shasum": "aa39e78f74e8d07d4ae7cd4ef1ff29491cb32353"
  },
  "_from": "grunt-cachebuster@",
  "_resolved": "https://registry.npmjs.org/grunt-cachebuster/-/grunt-cachebuster-0.1.4.tgz"
}
